// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login screen Connected, authentication check complete, and not authenticated should return login page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="bp4-dark login-screen-body"
      >
        <div
          class="login-container"
        >
          <form>
            <img
              alt=""
              id="GMSLogo"
              src="test-file-stub"
              width="370"
            />
            <div
              class="login-legal"
            />
            <div
              class="login-row user"
            >
              <div
                class="login-label"
              >
                Username:
              </div>
              <div
                class="login-input"
              >
                <div
                  class="bp4-input-group login-input"
                >
                  <input
                    class="bp4-input"
                    data-cy="username-input"
                    data-testid="username-input"
                    type="text"
                    value=""
                  />
                </div>
              </div>
            </div>
            <div
              class="login-row password"
            >
              <div
                class="login-label"
              >
                Password:
              </div>
              <div
                class="login-input"
              >
                <div
                  class="bp4-input-group bp4-disabled login-input"
                >
                  <input
                    autocomplete="off"
                    class="bp4-input"
                    disabled=""
                    type="password"
                    value=""
                  />
                </div>
              </div>
            </div>
            <div
              class="login-row login-button"
            >
              <button
                class="bp4-button"
                data-cy="login-btn"
                type="button"
              >
                <span
                  class="bp4-button-text"
                >
                  Login
                </span>
              </button>
            </div>
          </form>
        </div>
      </div>
      <div
        class="Toastify"
      />
    </div>
  </body>,
  "container": <div>
    <div
      class="bp4-dark login-screen-body"
    >
      <div
        class="login-container"
      >
        <form>
          <img
            alt=""
            id="GMSLogo"
            src="test-file-stub"
            width="370"
          />
          <div
            class="login-legal"
          />
          <div
            class="login-row user"
          >
            <div
              class="login-label"
            >
              Username:
            </div>
            <div
              class="login-input"
            >
              <div
                class="bp4-input-group login-input"
              >
                <input
                  class="bp4-input"
                  data-cy="username-input"
                  data-testid="username-input"
                  type="text"
                  value=""
                />
              </div>
            </div>
          </div>
          <div
            class="login-row password"
          >
            <div
              class="login-label"
            >
              Password:
            </div>
            <div
              class="login-input"
            >
              <div
                class="bp4-input-group bp4-disabled login-input"
              >
                <input
                  autocomplete="off"
                  class="bp4-input"
                  disabled=""
                  type="password"
                  value=""
                />
              </div>
            </div>
          </div>
          <div
            class="login-row login-button"
          >
            <button
              class="bp4-button"
              data-cy="login-btn"
              type="button"
            >
              <span
                class="bp4-button-text"
              >
                Login
              </span>
            </button>
          </div>
        </form>
      </div>
    </div>
    <div
      class="Toastify"
    />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Login screen authentication check in progress shows spinner, attempts to login 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="bp4-non-ideal-state bp4-non-ideal-state-vertical"
      >
        <div
          class="bp4-non-ideal-state-text"
        >
          <h4
            class="bp4-heading"
          >
            Checking login
          </h4>
          <div>
            Attempting to login...
          </div>
        </div>
        <div
          aria-valuemax="100"
          aria-valuemin="0"
          class="bp4-spinner bp4-intent-primary"
          role="progressbar"
        >
          <div
            class="bp4-spinner-animation"
          >
            <svg
              height="50"
              stroke-width="8.00"
              viewBox="1.00 1.00 98.00 98.00"
              width="50"
            >
              <path
                class="bp4-spinner-track"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              />
              <path
                class="bp4-spinner-head"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                pathLength="280"
                stroke-dasharray="280 280"
                stroke-dashoffset="210"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="bp4-non-ideal-state bp4-non-ideal-state-vertical"
    >
      <div
        class="bp4-non-ideal-state-text"
      >
        <h4
          class="bp4-heading"
        >
          Checking login
        </h4>
        <div>
          Attempting to login...
        </div>
      </div>
      <div
        aria-valuemax="100"
        aria-valuemin="0"
        class="bp4-spinner bp4-intent-primary"
        role="progressbar"
      >
        <div
          class="bp4-spinner-animation"
        >
          <svg
            height="50"
            stroke-width="8.00"
            viewBox="1.00 1.00 98.00 98.00"
            width="50"
          >
            <path
              class="bp4-spinner-track"
              d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
            />
            <path
              class="bp4-spinner-head"
              d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              pathLength="280"
              stroke-dasharray="280 280"
              stroke-dashoffset="210"
            />
          </svg>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Login screen failed to connect should return non ideal state, No connection to server 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="bp4-non-ideal-state bp4-non-ideal-state-vertical"
      >
        <div
          class="bp4-non-ideal-state-visual"
          style="font-size: 48px; line-height: 48px;"
        >
          <span
            aria-hidden="true"
            class="bp4-icon bp4-icon-error"
            icon="error"
            tabindex="-1"
          >
            <svg
              data-icon="error"
              height="48"
              role="img"
              viewBox="0 0 20 20"
              width="48"
            >
              <path
                d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm1 16H9v-2h2v2zm0-3H9V4h2v9z"
                fill-rule="evenodd"
              />
            </svg>
          </span>
        </div>
        <div
          class="bp4-non-ideal-state-text"
        >
          <h4
            class="bp4-heading"
          >
            No connection to server
          </h4>
          <div>
            Attempting to connect...
          </div>
        </div>
        <div
          aria-valuemax="100"
          aria-valuemin="0"
          class="bp4-spinner bp4-intent-danger"
          role="progressbar"
        >
          <div
            class="bp4-spinner-animation"
          >
            <svg
              height="50"
              stroke-width="8.00"
              viewBox="1.00 1.00 98.00 98.00"
              width="50"
            >
              <path
                class="bp4-spinner-track"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              />
              <path
                class="bp4-spinner-head"
                d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
                pathLength="280"
                stroke-dasharray="280 280"
                stroke-dashoffset="210"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="bp4-non-ideal-state bp4-non-ideal-state-vertical"
    >
      <div
        class="bp4-non-ideal-state-visual"
        style="font-size: 48px; line-height: 48px;"
      >
        <span
          aria-hidden="true"
          class="bp4-icon bp4-icon-error"
          icon="error"
          tabindex="-1"
        >
          <svg
            data-icon="error"
            height="48"
            role="img"
            viewBox="0 0 20 20"
            width="48"
          >
            <path
              d="M10 0C4.48 0 0 4.48 0 10s4.48 10 10 10 10-4.48 10-10S15.52 0 10 0zm1 16H9v-2h2v2zm0-3H9V4h2v9z"
              fill-rule="evenodd"
            />
          </svg>
        </span>
      </div>
      <div
        class="bp4-non-ideal-state-text"
      >
        <h4
          class="bp4-heading"
        >
          No connection to server
        </h4>
        <div>
          Attempting to connect...
        </div>
      </div>
      <div
        aria-valuemax="100"
        aria-valuemin="0"
        class="bp4-spinner bp4-intent-danger"
        role="progressbar"
      >
        <div
          class="bp4-spinner-animation"
        >
          <svg
            height="50"
            stroke-width="8.00"
            viewBox="1.00 1.00 98.00 98.00"
            width="50"
          >
            <path
              class="bp4-spinner-track"
              d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
            />
            <path
              class="bp4-spinner-head"
              d="M 50,50 m 0,-45 a 45,45 0 1 1 0,90 a 45,45 0 1 1 0,-90"
              pathLength="280"
              stroke-dasharray="280 280"
              stroke-dashoffset="210"
            />
          </svg>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
