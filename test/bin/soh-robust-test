#!/usr/bin/env python3

# -----------------------------------------------------------------------------
# perf-robusttest test script
#
# The perf-robusttest script allows a tester to perform the
# I&T SOH Perfomance Robustness tests.
# -----------------------------------------------------------------------------

import json
import os
import shlex
import subprocess
import sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from collections import defaultdict
from pathlib import Path

try:
    import yaml
    from rich.console import Console
except ImportError:
    load_script = (
        Path(__file__).resolve().parents[3] / "python/load-gms-conda-env.sh"
    )
    raise SystemExit(
        "It looks like you're not using the approved environment.  Please "
        f"run:  source {load_script}"
    )

console_kwargs = {"log_path": False}
if os.getenv("CI"):
    console_kwargs["force_terminal"] = True
if os.getenv("RICH_LOG_PATH"):
    console_kwargs["log_path"] = True
console = Console(**console_kwargs)

# -----------------------------------------------------------------------------
# These are the deployed containers we will be manipulating
# -----------------------------------------------------------------------------
expected_containers = {}

expected_containers['layer1'] = ['etcd', 'postgresql-gms', 'zookeeper']

expected_containers['layer2'] = [
    'kafka',
    'frameworks-osd-service',
    'frameworks-osd-station-soh-kafka-consumer',
    'frameworks-osd-rsdf-kafka-consumer'
]

expected_containers['layer3'] = [
    'frameworks-osd-systemmessage-kafka-consumer',
    'ssam-control',
    'soh-status-change-kafka-consumer',
    'soh-quieted-list-kafka-consumer',
    'da-connman',
    'soh-control',
    'ui-processing-configuration-service',
    'cd11-rsdf-processor'
]

expected_containers['layer4'] = [
    'da-dataman',
    'interactive-analysis-api-gateway',
    'interactive-analysis-ui',
    'smds-service'
]


def main():

    # -- verify kubectl is available
    if not which('kubectl'):
        print(
            "ERROR: 'kubectl' executable not found in PATH. Please install "
            "kubectl."
        )
        sys.exit(1)

    # -- verify helm is available
    if not which('gmskube'):
        print(
            "ERROR: 'gmskube' executable not found in PATH. Please install "
            "gmskube."
        )
        sys.exit(1)

    # -- verify KUBECONFIG is set
    if "KUBECONFIG" not in os.environ:
        print(
            "ERROR: Variable 'KUBECONFIG' must be set to the kubernetes "
            "configuration."
        )
        sys.exit(1)

    try:
        with open(os.environ["KUBECONFIG"]) as file:
            kubeconfig = yaml.load(file, Loader=yaml.FullLoader)
            if 'clusters' not in kubeconfig:
                print(
                    "ERROR: No clusters defined in file "
                    f"'{ os.environ['KUBECONFIG'] }"
                )
                sys.exit(1)

    except OSError:
        print(
            "ERROR: Failed to open KUBECONFIG file "
            f"'{ os.environ['KUBECONFIG'] }'"
        )
        sys.exit(1)

    args = get_args()
    working_layer = ''

    # -- verify that the Robustness Layer is 1, 2, 3, or 4
    if args.layer not in ['1', '2', '3', '4']:
        print(
            "ERROR: Invalid Robustness Layer specified - "
            "must be either 1, 2, 3, or 4."
        )
        sys.exit(1)
    else:
        working_layer = "layer" + args.layer
        print("\n")
        console.log(
            f"[green]Performing the Robustness Layer {args.layer} test\n"
        )

    # -- collect the pod information for the instance
    console.log(
        f"[green]Getting instance {args.name} pod information."
    )
    pods = get_pod_info(args.name)
    console.log(
        f"[green]Number of pods in {args.name}: {str(len(pods))}\n"
    )
    if len(pods) == 0:
        console.log(
            "[red]It does not appear that your instance is running "
            "correctly. Please verify that it is running, and try again."
        )
        sys.exit(1)
    else:
        # -- verify the pods that we will be exercising are available
        status = verify_pods(pods, working_layer)
        if status != len(expected_containers[working_layer]):
            console.log(
                f"[red]Exiting Robustness Layer {args.layer} test\n"
            )
            sys.exit(1)
        candidate = get_candidate(args.name)

    # -- set baseline vars
    total_pods = len(expected_containers[working_layer])
    spun_down = 0
    pods_down = 0
    pods_notdown = 0
    spun_up = 0
    pods_up = 0
    pods_notup = 0
    pods_nowork = total_pods
    podlable = ''

    # -- cycle through the pods that we are exercising
    for pod in expected_containers[working_layer]:
        if (expected_containers[working_layer].index(pod)) + 1 <= total_pods:
            podwork = ''
            while podwork.upper() != 'Y':
                podlable = pod
                podwork = input(
                    "\nWould you like to SCALE DOWN pod: " + podlable +
                    " (Y/N)? "
                )
                if podwork.upper() == 'Y':
                    console.log(
                        f"[cyan]Starting to scale down pod(s): {podlable}\n"
                    )
                    spun_down += 1
                    pods_nowork -= 1
                    status = scale_down_pod(candidate, args.name, pod)
                    if status != 0:
                        print("\n")
                        console.log(
                            "[red]THERE WAS A SYSTEM ERROR WHILE TRYING TO "
                            "SCALE DOWN THE POD\nPROGRAM WILL EXIT\n"
                        )
                        sys.exit(1)

                    verif = ''
                    while verif.upper() != 'Y':
                        if pod in ['interactive-analysis-api-gateway']:
                            verif = input(
                                "\nPlease verify on your watch list -- "
                                "Did the pod scale down appropriately "
                                "and is the UI no longer updating (Y/N)? "
                            )
                        else:
                            verif = input(
                                "\nPlease verify on your watch list -- Did "
                                "the pod(s) scale down appropriately (Y/N)? "
                            )

                        if verif.upper() == 'Y':
                            console.log(
                                f"[green]STATUS: Pod(s): {podlable} "
                                "successfully scaled down\n"
                            )
                            pods_down += 1
                        elif verif.upper() == 'N':
                            console.log(
                                f"[red]STATUS: Pod(s): {podlable} "
                                "did not scale down successfully\n"
                            )
                            pods_notdown += 1
                            verif2 = ''
                            while verif2.upper() != 'Y':
                                verif2 = input(
                                    "Would you like to continue with the test "
                                    "(Y/N)? "
                                )
                                if verif2.upper() == 'Y':
                                    console.log(
                                        "[green]Continuing with the "
                                        f"Robustness Layer {args.layer} test\n"
                                    )
                                elif verif2.upper() == 'N':
                                    print("\n")
                                    console.log(
                                        "[red]Exiting Robustness Layer "
                                        f"{args.layer} test.\n"
                                    )
                                    print_summary(
                                        args.layer,
                                        total_pods,
                                        pods_nowork,
                                        spun_down,
                                        pods_down,
                                        pods_notdown,
                                        spun_up,
                                        pods_up,
                                        pods_notup
                                    )
                                    sys.exit(1)
                                else:
                                    print(
                                        "\nI don't understand that choice, "
                                        "please try again.\n"
                                    )
                            break
                        else:
                            print(
                                "\nI don't understand that choice, please try "
                                "again.\n"
                            )

                    cont = ''
                    while cont.upper() != 'Y':
                        cont = input(
                            "Would you like to continue and RESTART pod(s): "
                            + podlable + " (Y/N)? "
                        )
                        if cont.upper() == 'Y':
                            console.log(
                                f"[cyan]Restarting pod(s): {podlable}\n"
                            )
                            spun_up += 1
                            status = restart_pod(candidate, args.name, pod)
                            if status != 0:
                                print("\n")
                                console.log(
                                    "[red]THERE WAS A SYSTEM ERROR WHILE "
                                    "TRYING TO RESTART THE POD\nPROGRAM WILL "
                                    "EXIT\n"
                                )
                                sys.exit(1)

                            cont2 = ''
                            while cont2.upper() != 'Y':
                                cont2 = input(
                                    "\nDid the pod(s) restart appropriately? "
                                    "Is the UI updating as expected (Y/N)? "
                                )
                                if cont2.upper() == 'Y':
                                    console.log(
                                        f"[green]STATUS: Pod(s): {podlable} "
                                        "successfully restarted\n"
                                    )
                                    pods_up += 1
                                elif cont2.upper() == 'N':
                                    console.log(
                                        f"[red]STATUS: Pod(s): {podlable} "
                                        "did not restart successfully\n"
                                    )
                                    pods_notup += 1
                                    break
                                else:
                                    print(
                                        "\nI don't understand that choice, "
                                        "please try again.\n"
                                    )

                            cont3 = ''
                            while cont3.upper() != 'Y':
                                cont3 = input(
                                    "\nWould you like to continue the "
                                    "Robustness Layer "
                                    + args.layer + " test (Y/N)? "
                                )
                                if cont3.upper() == 'Y':
                                    if (
                                        expected_containers[working_layer]
                                        .index(pod)
                                    ) + 1 != total_pods:
                                        print("\n")
                                        console.log(
                                            "[green]Continuing with the "
                                            f"Robustness Layer {args.layer} "
                                            "test.\n"
                                        )
                                elif cont3.upper() == 'N':
                                    print("\n")
                                    console.log(
                                        "[red]Exiting Robustness Layer "
                                        f"{args.layer} test.\n"
                                    )
                                    print_summary(
                                        args.layer,
                                        total_pods,
                                        pods_nowork,
                                        spun_down,
                                        pods_down,
                                        pods_notdown,
                                        spun_up,
                                        pods_up,
                                        pods_notup
                                    )
                                    sys.exit(1)
                                else:
                                    print(
                                        "\nI don't understand that choice, "
                                        "please try again.\n"
                                    )
                        elif cont.upper() == 'N':
                            console.log(
                                "[red]WARNING: You are NOT restarting "
                                f"pod(s): {podlable}\n"
                            )
                            verif3 = ''
                            while verif3.upper() != 'Y':
                                verif3 = input(
                                    "Would you like to continue with the test "
                                    "(Y/N)? "
                                )
                                if verif3.upper() == 'Y':
                                    console.log(
                                        "[green]Continuing with the "
                                        f"Robustness Layer {args.layer} "
                                        "test.\n"
                                    )
                                elif verif3.upper() == 'N':
                                    print("\n")
                                    console.log(
                                        "[red]Exiting Robustness Layer "
                                        f"{args.layer} test.\n"
                                    )
                                    print_summary(
                                        args.layer,
                                        total_pods,
                                        pods_nowork,
                                        spun_down,
                                        pods_down,
                                        pods_notdown,
                                        spun_up,
                                        pods_up,
                                        pods_notup
                                    )
                                    sys.exit(1)
                                else:
                                    print(
                                        "\nI don't understand that choice, "
                                        "please try again.\n"
                                    )
                            break
                        else:
                            print(
                                "\nI don't understand that choice, please try "
                                "again.\n"
                            )
                elif podwork.upper() == 'N':
                    console.log(
                        "[red]NOTICE: Not performing work on "
                        f"pod(s): {podlable}\n"
                    )
                    break
                else:
                    print(
                        "\nI don't understand that choice, please try again.\n"
                    )

    # uninstall instance
    uninstallStat = uninstall_instance(args.name)
    if uninstallStat != 0:
        print("\n")
        console.log(
            "[red]THERE WAS A SYSTEM ERROR WHILE TRYING TO UNINSTALL THE "
            "INSTANCE\nYOU MAY NEED TO UNINSTALL THE INSTANCE MANUALLY\n"
        )

    print("\n")
    console.log(
        f"[green]All pods complete - exiting Robustness Layer {args.layer} "
        "test.\n"
    )
    print_summary(
        args.layer,
        total_pods,
        pods_nowork,
        spun_down,
        pods_down,
        pods_notdown,
        spun_up,
        pods_up,
        pods_notup
    )
    sys.exit(0)


def get_args():
    'Get command-line arguments.'

    description = """
description:
  The perf-robusttest script allows a tester to perform a
  I&T SOH Perfomance Robustness test on the GMS system.

    """
    parser = ArgumentParser(
        description=description,
        formatter_class=RawDescriptionHelpFormatter
    )

    parser.add_argument(
        '--name', '-n', required=True, help="Name of the instance to checkout"
    )

    parser.add_argument(
        '--layer', '-l', required=True,
        help="The Robustness Layer to test (1/2/3/4)"
    )

    args = parser.parse_args()

    return args


def verify_pods(pods, layer):
    """
    Verify that the pods that we will be scaling are on the list.
    """

    val = 0
    expected = 0
    for pod in expected_containers[layer]:
        expected += 1
        for deployment_name in pods:
            if pod in deployment_name:
                val += 1
                break
        if val != expected:
            console.log(
                f"[red]Pod: {pod} not found in list of pods\n"
            )
            expected -= 1

    return val


def get_candidate(name):
    """
    Get the instance candidate information.
    """
    _, gms_configmap, _ = run(
        f"kubectl get configmap --namespace {name} --output json gms"
    )
    gms_configmap = json.loads(gms_configmap.strip())
    return gms_configmap["metadata"]["labels"]["gms/image-tag"]


def scale_down_pod(candidate, name, pod):
    """
    Scale down a running pod.
    """

    if pod in ['kafka', 'zookeeper']:
        console.log(
            f"[yellow]Issuing command:   kubectl -n {name} scale "
            f"statefulsets { pod } --replicas=2"
        )
        rc, out, err = run(
            f"kubectl -n {name} scale statefulsets { pod } --replicas=2"
        )
    else:
        console.log(
            f"[yellow]Issuing command:  gmskube upgrade --tag {candidate} "
            f"--set {pod}.replicas=0 {name}"
        )
        rc, out, err = run(
            f"gmskube upgrade --tag { candidate } --set { pod }.replicas=0 "
            f"{ name }"
        )

    if rc != 0:
        console.log(f"[red]{err}")
        return 1

    return 0


def restart_pod(candidate, name, pod):
    """
    Restart a stopped pod.
    """

    if pod in ['kafka', 'zookeeper']:
        console.log(
            f"[yellow]Issuing command:   kubectl -n {name} scale "
            f"statefulsets {pod} --replicas=3"
        )
        rc, out, err = run(
            f"kubectl -n {name} scale statefulsets { pod } --replicas=3"
        )
    else:
        console.log(
            f"[yellow]Issuing command:   gmskube upgrade --tag {candidate} "
            f"--set {pod}.replicas=1 {name}"
        )
        rc, out, err = run(
            f"gmskube upgrade --tag { candidate } --set { pod }.replicas=1 "
            f"{ name }"
        )

    if rc != 0:
        console.log(f"[red]{err}")
        return 1

    return 0


def uninstall_instance(name):
    """
    Uninstall the instance.
    """

    removeInst = ''
    while removeInst.upper() != 'Y':
        removeInst = input(
            "\nWould you like to uninstall the \'" + name
            + "\' instance that was used for this test (Y/N)? "
        )
        if removeInst.upper() == 'Y':
            console.log(f"[red]Uninstalling instance: {name}\n")

            console.log(f"[yellow]Issuing command:  gmskube uninstall {name}")

            rc, out, err = run(f"gmskube uninstall {name}")

            if rc != 0:
                console.log(f"[red]{err}")
                return 1
            else:
                console.log(
                    f"[green]Instance {name} uninstalled "
                    "successfully!\n"
                )

        elif removeInst.upper() == 'N':
            console.log(f"[red]The {name} instance will NOT be uninstalled\n")
            break
        else:
            print("\nI don't understand that choice, please try again.\n")

    return 0


def print_summary(
    layer,
    total_pods,
    pods_nowork,
    spun_down,
    pods_down,
    pods_notdown,
    spun_up,
    pods_up,
    pods_notup
):
    """
    Print the summary of the current run.
    """

    console.rule("[bold green]Summary")

    console.log(
        f"[green]Total number of Robustness Layer {layer} "
        f"pods: {str(total_pods)}\n"
    )
    console.log(
        f"[green]Of {str(total_pods)} pods, {str(pods_nowork)} "
        "were not addressed\n"
    )
    console.log(
        f"[green]Of {str(total_pods)} pods, {str(spun_down)} "
        f"were spun down :  {str(pods_down)} "
        f"spun down successfully, and {str(pods_notdown)} did not\n"
    )
    console.log(
        f"[green]Of {str(total_pods)} pods, {str(spun_up)} "
        f"were restarted :  {str(pods_up)} "
        f"restarted successfully, and {str(pods_notup)} did not\n"
    )

    return 0


def get_pod_info(name):
    """
    Gather a dictionary of running pods for the given instance name.
    """

    rc, out, err = run(f"kubectl get pods -n { name } --no-headers")
    podnum = 0

    pods = defaultdict(list)
    for line in out.splitlines():
        columns = line.split()
        deployment_name = columns[0].rsplit('-', 2)[0]
        if pods[deployment_name]:
            depname = deployment_name
            podnum += 1
            deployment_name = deployment_name + "_" + str(podnum)
            while pods[deployment_name]:
                podnum += 1
                deployment_name = depname + "_" + str(podnum)
        else:
            podnum = 0
        pod = {}
        pod['deployment_name'] = deployment_name
        pod['name'] = columns[0]
        pod['ready'] = columns[1]
        pod['status'] = columns[2]
        pod['restarts'] = columns[3]
        pod['age'] = columns[4]

        pods[deployment_name].append(pod)

    return pods


def run(cmd, print_output=False, num_tries=1):
    """
    Execute the specified command and return when the command execution is
        completed.
    :param print_output: Enable printing of stdout and stderr immediately
    :param num_tries: Retry this number of times if command fails
    Returns the return code, stdout, and stderr of the command.
    """

    while True:
        # cmd = subprocess.Popen(command.split(), stdout=subprocess.PIPE,
        # stderr=subprocess.PIPE, stdin=subprocess.PIPE)

        if "|" in cmd:
            cmd_parts = cmd.split('|')
        else:
            cmd_parts = []
            cmd_parts.append(cmd)
        i = 0
        p = {}
        for cmd_part in cmd_parts:
            cmd_part = cmd_part.strip()
            if i == 0:
                p[i] = subprocess.Popen(
                    shlex.split(cmd_part),
                    stdin=None,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
            else:
                p[i] = subprocess.Popen(
                    shlex.split(cmd_part),
                    stdin=p[i - 1].stdout,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
            i += 1

        out, err = p[i - 1].communicate()
        out = out.decode()
        err = err.decode()

        if print_output:
            print(out)
            if len(err) > 0:
                console.log("[yellow]{err}")

        if p[i - 1].returncode == 0 or num_tries == 0:
            break
        else:
            num_tries = num_tries - 1

    return p[i - 1].returncode, out, err


def which(program):
    """
    Search PATH for a given program.
    """
    for path in os.environ["PATH"].split(os.pathsep):
        fpath = os.path.join(path, program)
        if os.path.exists(fpath) and os.path.isfile(fpath) and os.access(
            fpath,
            os.X_OK
        ):
            return fpath

    return None


if __name__ == "__main__":
    main()
