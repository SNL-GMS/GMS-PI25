#!/usr/bin/env python3

# ----------------------------------------------------------------------------
# This Python script was developed to auto update the operational time period
# in config so that the 2019 static data set can be used with the interval
# table in the Workflow Display.
# ----------------------------------------------------------------------------
import json
from datetime import datetime
from pathlib import Path

try:
    import numpy as np
except ImportError:
    load_script = (
        Path(__file__).resolve().parents[3] / "python/load-gms-conda-env.sh"
    )
    raise SystemExit(
        "It looks like you're not using the approved environment.  Please "
        f"run:  source {load_script}"
    )


# Update operational time period function
def main():
    config_dir = Path(__file__).resolve().parents[2] / "test/config"
    workflow_config_file = (
        config_dir / "ian/workflow-display-test/processing/"
        "global.operational-time-period/default.json"
    )
    waveform_config_file = (
        config_dir / "ian/waveforms-display-test/processing/"
        "global.operational-time-period/default.json"
    )

    # If config files do not exist, exit
    if not workflow_config_file.is_file():
        print(f"File {workflow_config_file} does not exist.\nExiting\n")
        exit()

    elif not waveform_config_file.is_file():
        print(f"File {waveform_config_file} does not exist.\nExiting\n")
        exit()

    else:
        # Update operational time period
        updateOTP(workflow_config_file)
        updateOTP(waveform_config_file)

    # Confirm write
    print("Operational time period updated.")


def updateOTP(infile):
    '''
    This function is used to update the operational time period in config.
    operationalPeriodStart and operationalPeriod end in
    config/processing/global.operational-time-period/default.json will be
    updated to reflect the number of elapsed hours since 2019-01-05 and
    2019-01-06, respectively.

    :param infile: file path + name of config file to be adjusted
    :return: no returns, but does overwrite the config file
    '''

    # Calculate opStart (operational time period start) and opEnd
    # (operational time period end) to be the number of elapsed hours
    # since 2019-10-05 and 2019-04-06, respectively; this is a 6month
    # time span with 3 months on either side of the seed data
    opStart = np.floor(
        (datetime.now() - datetime(2018, 10, 5)).total_seconds() / 3600
    )  # yapf: disable
    opEnd = np.floor(
        (datetime.now() - datetime(2019, 4, 6)).total_seconds() / 3600
    )  # yapf: disable

    # Read in global.operational-time-period/default.json
    f = open(infile)
    data = json.load(f)

    # Add calculated elapsed time to config file
    parameters = data["parameters"]
    parameters["operationalPeriodStart"] = f"PT{round(opStart)}H"
    parameters["operationalPeriodEnd"] = f"PT{round(opEnd)}H"

    # Write out config file with new values
    with open(infile, "w") as outfile:
        json.dump(data, outfile, indent=2)


if __name__ == "__main__":
    main()
